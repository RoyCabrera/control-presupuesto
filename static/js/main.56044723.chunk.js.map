{"version":3,"sources":["components/Error.jsx","components/Pregunta.jsx","components/Formulario.jsx","components/Gasto.jsx","components/Listado.jsx","helpers.js","components/ControlPresupuesto.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","setPresupuesto","setRestante","setMostrarPregunta","useState","cantidad","setCantidad","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","setGasto","setCrearGasto","nombre","setNombre","trim","gasto","id","shortid","generate","Gasto","Listado","gastos","map","index","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarPregunta","setGastos","crearGasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.56044723.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Error = ({mensaje}) => {\n\n    return(\n    <p className='alert alert-danger error'>{mensaje}</p>\n    );\n}\n\nError.propTypes = {\n    mensaje:PropTypes.string.isRequired\n}\n\nexport default Error;","import React,{Fragment,useState} from 'react';\nimport Error from './Error';\nimport PropTypes from 'prop-types';\n\n\nconst Pregunta = ({setPresupuesto,setRestante,setMostrarPregunta}) => {\n\n    const [cantidad,setCantidad] = useState(0);\n    const [error,setError] = useState(false);\n\n    const defenirPresupuesto = (e) => {\n        setCantidad(parseInt(e.target.value));\n    }\n\n    const agregarPresupuesto = (e) => {\n        e.preventDefault();\n\n        //validar\n        if(cantidad < 1 || isNaN(cantidad)){\n            setError(true);\n            return;\n        }\n        setError(false);\n        setPresupuesto(cantidad);\n        setRestante(cantidad);\n        setMostrarPregunta(false);\n    }\n\n\n\n    return(\n\n        <Fragment>\n            <h2>Coloca tu presupuesto</h2>\n            {   error ? <Error mensaje='El presupuesto es Incorrecto' /> : null   }\n\n            <form onSubmit={agregarPresupuesto}>\n                <input type=\"number\" className=\"u-full-width\" placeholder=\"Coloca tu presupuesto\" onChange={defenirPresupuesto} />\n                <input type=\"submit\" value=\"Definir presupuesto\" className=\"u-full-width button-primary\"/>\n            </form>\n\n        </Fragment>\n    );\n\n}\n\nPregunta.propTypes = {\n    setPresupuesto :PropTypes.func.isRequired,\n    setRestante:PropTypes.func.isRequired,\n    setMostrarPregunta:PropTypes.func.isRequired\n}\n\nexport default Pregunta;","import React,{useState} from 'react';\nimport shortid from 'shortid';\nimport Error from './Error';\nimport PropTypes from 'prop-types';\n\n\nconst Formulario = ({setGasto,setCrearGasto}) => {\n\n    const [nombre,setNombre] = useState('');\n    const [cantidad, setCantidad] = useState(0);\n    const [error,setError] = useState(false);\n\n    const guardarNombre = (e) => {\n        setNombre(e.target.value);\n    } \n\n    const guardarCantidad = (e) => {\n        setCantidad(parseInt(e.target.value));\n    }\n\n    const agregarGasto = (e) => {\n        e.preventDefault();\n\n        //validar\n        if(cantidad < 1 || isNaN(cantidad) || nombre.trim() ==='' ){\n\n            setError(true);\n            return;\n        }\n        \n        setError(false);\n        //construir el gasto\n        const gasto = {\n            nombre,\n            cantidad,\n            id:shortid.generate()\n        }\n\n        \n        \n        //pasar el gasto al componente principal\n        setGasto(gasto);\n        setCrearGasto(true);\n        //resetear el form\n        setNombre('');\n        setCantidad(0);\n    }\n\n    return(\n\n        <form onSubmit={agregarGasto}>\n            <h2>Agrega tus gastos aqu√≠</h2>\n\n            {error ? <Error mensaje=\"Ambos campos son obligatorios o presupuesto incorrecto\" /> : null}\n            <div className=\"campo\">\n                <label>Nombre gasto</label>\n                <input type=\"text\" className=\"u-full-width\" placeholder='Ej. Transporte' value={nombre} onChange={guardarNombre} />\n            </div>\n\n            <div className=\"campo\">\n                <label>Cantidad gasto</label>\n                <input type=\"number\" className=\"u-full-width\" placeholder='Ej. 300' value={cantidad} onChange={guardarCantidad}  />\n            </div>\n             \n             <input type=\"submit\" value=\"Agregar gasto\" className='button-primary u-full-width' />\n        </form>\n\n    );\n\n\n}\n\nFormulario.propTypes = {\n    setGasto:PropTypes.func.isRequired,\n    setCrearGasto:PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Gasto = ({gasto}) => {\n    \n\n    return(\n        <li className='gastos' >\n            <p>\n                {gasto.nombre} \n                <span className=\"gasto\">$ {gasto.cantidad} </span>\n            </p>\n        </li>\n\n    );\n}\n\nGasto.propTypes = {\n    gasto : PropTypes.object.isRequired\n}\n\nexport default Gasto;","import React from \"react\";\nimport Gasto from './Gasto';\nimport PropTypes from 'prop-types';\n\nconst Listado = ({gastos}) => {\n\n    return(\n        <div className='gastos-realizados' >\n            <h2>Listado</h2>\n            {\n                gastos.map((gasto,index)=>(\n                    <Gasto key={index} gasto={gasto} />\n                ))\n            }\n        </div>\n    );\n}\n\nListado.propTypes = {\n    gastos:PropTypes.array.isRequired\n}\n\nexport default Listado;","export const revisarPresupuesto = (presupuesto,restante) => {\n    let clase;\n    if((presupuesto / 4) > restante){\n        clase = 'alert alert-danger';\n    } else if((presupuesto / 2) > restante){\n        clase = 'alert alert-warning';\n    }else{\n        clase = 'alert alert-success';\n    }\n    return clase;\n}","import React,{Fragment} from 'react';\nimport {revisarPresupuesto} from '../helpers';\nimport PropTypes from 'prop-types';\n\nconst ControlPresupuesto = ({presupuesto,restante}) => {\n\n    return(\n        <Fragment>\n            <div className='alert alert-primary'>\n                Presupuesto: $ {presupuesto}\n            </div>\n            <div className={revisarPresupuesto(presupuesto,restante)}>\n                Restante: $ {restante}\n            </div>\n        </Fragment>\n        \n    );\n\n}\n\nControlPresupuesto.propTypes = {\n    presupuesto:PropTypes.number.isRequired,\n    restante:PropTypes.number.isRequired\n} \n\nexport default ControlPresupuesto;","import React,{useState,useEffect} from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from \"./components/Listado\";\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n\n  // HOOKS\n\n  const [presupuesto,setPresupuesto] = useState(0);\n  const [restante,setRestante] = useState(0);\n  const [mostrarPregunta,setMostrarPregunta] = useState(true);\n  const [gastos,setGastos] = useState([]);\n  const [gasto,setGasto] = useState({});\n  const [crearGasto,setCrearGasto] = useState(false);\n\n  useEffect(()=>{\n    if(crearGasto){\n      setGastos([\n        ...gastos,\n        gasto\n      ]);\n      const presupuestoRestante = restante - gasto.cantidad;\n      setRestante(presupuestoRestante);\n      setCrearGasto(false);\n    }\n\n  },[gasto,crearGasto,gastos,restante])\n\n\n  return (\n    <div className='container'>\n      <header>\n        <h1>GASTO SEMANAL</h1>\n        <div className=\"contenido-principal contenido\">\n          {\n            \n            mostrarPregunta ? \n            \n            (\n              <Pregunta setPresupuesto={setPresupuesto} setRestante={setRestante} setMostrarPregunta={setMostrarPregunta} />\n            )\n            \n            : \n            \n            (\n\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Formulario setGasto={setGasto} setCrearGasto={setCrearGasto} />\n                </div>\n                <div className=\"one-half column\">\n                  <Listado gastos={gastos} />\n                  <ControlPresupuesto presupuesto={presupuesto} restante={restante} />\n                </div>\n              </div>\n\n            )\n          \n          }\n          \n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}